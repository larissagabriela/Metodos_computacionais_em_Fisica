# -*- coding: utf-8 -*-
"""Projetil.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19rGdOdTsf8kNG-9tv8wlOjxxiXgj0AVE
"""

import numpy as np
import matplotlib.pyplot as plt

print("Esse programa resolve o sistema de EDOs do lançamento de projétil com resistência do ar")

def Euler(ti,tf,xi,N,derivada):
  h = (tf - ti)/N                             # passo 
  t = np.arange(ti,tf,h)
  if isinstance(xi,(float,int)):
    x = np.zeros(N)
  else:
    neq = len(xi)
    x = np.zeros((N,neq))
    x[0]=xi
  for k in range(1,len(t)):
    x[k] = x[k-1] + h*derivada(x[k-1],t[k-1])
  return x,t

def derivada(S,t):               #Com resistência do ar
    B2_m = 4 * 10**-5
    v = 700
    g = 9.87
    return np.array([S[1], -B2_m*np.sqrt(S[1]**2 + S[3]**2)*S[1], S[3], -B2_m*np.sqrt(S[1]**2 + S[3]**2) *S[3]- g])

def derivada_(S_,t_):            #Sem resistência do ar
    B2_m = 0
    v = 700
    g = 9.87
    return np.array([S_[1], -B2_m*np.sqrt(S_[1]**2 + S_[3]**2)*S_[1], S_[3], -B2_m*np.sqrt(S_[1]**2 + S_[3]**2) *S_[3]- g])

ti = 0                      # t inical
tf = 110                    # t final
theta = np.pi/4
Si = np.array([0, 700*np.cos(theta),0, 700*np.sin(theta)])      # condicoes iniciais
N = 1000                                                       # numero de pontos desejados
S,t = Euler(ti,tf,Si,N,derivada)
S_, t_ = Euler(ti,tf,Si,N,derivada_)

plt.plot(S[:,0], S[:,2],'r-', label = 'Com resistência do ar')
plt.plot(S_[:,0], S_[:,2],'g-', label = 'Sem resistência do ar')
plt.xlabel("posição x")
plt.ylabel("posição y")
plt.ylim(bottom = 0)
plt.legend()
plt.show()