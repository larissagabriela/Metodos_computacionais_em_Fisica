# -*- coding: utf-8 -*-
"""Lorentz

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LqGYVGXLjTI_APUTywqQvpbje16-AoGt
"""

#Créditos para a Carol 

import numpy as np
from math import *
import matplotlib.pyplot as plt

print("Esse programa resolve o sistema de EDOs do atrator de Lorentz")

def Euler(ti,tf,xi,yi,zi,N,derivada):
  h = (tf - ti)/N   # passo
  x = np.zeros(N)
  y = np.zeros(N)
  z = np.zeros(N)
  t = np.arange(ti,tf,h)
  x[0] = xi
  y[0] = yi
  z[0] = zi
  for k in range(1,len(t)-1):
    x[k] = x[k-1] + h*derivada(x[k-1],y[k-1],z[k-1],t[k-1])[0]
    y[k] = y[k-1] + h*derivada(x[k-1],y[k-1],z[k-1],t[k-1])[1]
    z[k] = z[k-1] + h*derivada(x[k-1],y[k-1],z[k-1],t[k-1])[2]
  return x,y,z,t

def derivada(x,y,z,t):
    sigma = 10
    ro = 28
    beta = 8/3
    return np.array([sigma*(y-x), ro*x - y - x*z, x*y - beta * z])

ti = 0                      # t inical
tf = 50                     # t final
xi = 0                      # x inicial
yi = 1                      # y inicial
zi = 0                      # z inicial
N = 5000                    # numero de pontos desejados
x,y,z,t = Euler(ti,tf,xi,yi,zi,N,derivada)

fig,(ax1,ax2) = plt.subplots(2,1)
ax1.plot(t,y,'r')
ax2.plot(x,z,'b')
plt.xlabel("tempo")
plt.ylabel("posição")
fig.tight_layout()
plt.show()